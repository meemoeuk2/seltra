currently the code is configged towards 'lego bricks' rather than 'chemical bricks'
 not sure this is best, but really we could use both

try move code towards that falling trash game we had in blitzplus

 mouse select of paintbox is currently using  blind constant to guess where
  paintbox items end. 
  Use a counter while items are being intiated

 new block code is lacking because up till now the only block adds have been user mouse click


 blist vs bgroup vs barray
 are they all necessary? or can we cut back to 2, or 1?
 a blist is another name for a barray
  so their are only 2 types

 can barrays and bgroups be combined?
 a bgroup is a wrapper around a barray

actually realtime generator adding will not be as hard as 1st thought, to 


we are using an map type that is remembering all its keys and values
 this essentially can give access to all thing and objects 
 yet we are also using objects to remember the keys and values
  could we trim somthing down?

 could all data of an object be stored in a single int?
  - wouldn't need to use objects
  - just a single thingmap
  - things would have to be processed out of order of object type, which may lead to problems
  - would need to write a encoder and a decoder to get info in and out of the int
    - but this should be pretty simple, and worth it for a single intmap
  - also this would make use of the key array, which is currently redundant due to object lists
  - there are a lot of object lists and this is complicated

 thingmaps block handling won't work until blockgroup arrays are implemented
  - we have 3 longs per block
   - the index ( pref not used )
   - the key ( can use )
   - the value ( can use )
   so do we need a seperate a blockgroup array?
   - the index can be just used for block groups, since blocks can never act independantly of their groups
    - a reference to the index can be in the value or key
     -  of course index cannot reference many values

 thing value needs a 'hasmoved this frame' flag
 
 generators and substrates should not be infront of blocks in the paintbox
  can do this later

 bond actual flags are correctly working
  now need to effect block groups
   the index array is a list of blockgroups
    master blocks are listed
    slave blocks are not, and must be accessed thru the master : by key-map :
 
 when a block moves between key-listed cells, its index must remain the same : for index priority ordering 


simul block moves will require a chain dependancy solver
 blocks need a pointer to the lynchpin block
 should be built in one cycle
n 

walls should not be listed as things to process in the list

mental discordance
 what is better?
  1. a list to things such that a list of map locations points to the list of things?
  2. or a list of map locations with each map location containing the thing?

  if 2 then we'd always have to access the useful list via another list, 
    slowing the process

 the reason we abandoned the 'each map cell has its own memory'
  was because it would require pointing to a large object
   but now its just a Ulong.
   what are we saving by having a map of ints pointing to a list of Ulongs?
    why not just have a map of Ulongs?

  the vlist could be fast way of accessing all the active cells in the keymap
   with the keymap containing the useful info

  currently the vlist contains all the useful info
   with the keymap contain vlist index
   
 
indices are +1 than expected
 looks like arrows are counted
 consider removing arrows from active list
  ok done, but movement doesn't work
   is the arrow still there when block is placed?

  we don't have to have merged arrow block in one thing element. 
   they can be block in active sublist and arrow in passive sublist   

  keys are ints, can point to 2 8x8s
   doing layering within longs/ints is a bit dodgy
    we will want to add more layers later
    but then in principle should be ok
   make the choice shift keys to ulongs, or key maps to 8x8 instead of 10x10 bits
    made : keymap is now ulong
     next step is to make keymaps hold 2~3 indices
      with half a million indices, can hold 3 indices per key ( 18bit )
       this can in theory go to slightly over 2 million ( 21bit )
       good. one layer for actives, 1 layer for inactives, 1 layer for special

       